package uk.co.scottdennison.java.gradle.plugin.velocity;

import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.Task;
import org.gradle.api.artifacts.Configuration;
import org.gradle.api.file.Directory;
import org.gradle.api.file.SourceDirectorySet;
import org.gradle.api.internal.plugins.DslObject;
import org.gradle.api.internal.tasks.DefaultSourceSet;
import org.gradle.api.model.ObjectFactory;
import org.gradle.api.plugins.JavaBasePlugin;
import org.gradle.api.plugins.JavaPluginConvention;
import org.gradle.api.provider.Provider;
import org.gradle.api.tasks.SourceSet;

import javax.inject.Inject;

public class VelocityPlugin implements Plugin<Project> {
	public static final String CONFIGURATION_NAME = "velocity";
	public static final String SOURCESET_INPUT_SUBDIRECTORY_NAME = "velocity";
	public static final String SOURCESET_OUTPUT_SUBDIRECTORY_NAME = "velocity";

	private final ObjectFactory objectFactory;

	@Inject
	public VelocityPlugin(ObjectFactory objectFactory) {
		this.objectFactory = objectFactory;
	}

	@Override
	public void apply(Project project) {
		project.getPlugins().apply(JavaBasePlugin.class);

		Configuration velocityConfiguration = project.getConfigurations().create(CONFIGURATION_NAME)
			.setVisible(false)
			.setDescription("The velocity libraries to be used for this project.");

		velocityConfiguration.defaultDependencies(dependencies -> dependencies.add(project.getDependencies().create("org.apache.velocity:velocity-engine-core:2.2")));

		JavaPluginConvention javaPluginConvention = project.getConvention().getPlugin(JavaPluginConvention.class);

		VelocityPluginExtension velocityPluginExtension = new VelocityPluginExtension();
		project.getExtensions().add(VelocityPluginExtension.EXTENSION_NAME, velocityPluginExtension);

		javaPluginConvention.getSourceSets().all(sourceSet -> this.applyToSourceSet(project, sourceSet, velocityPluginExtension));

		project.getTasks().withType(VelocityTask.class).configureEach(velocityTask -> this.configureTask(velocityTask, velocityConfiguration));
	}

	private void applyToSourceSet(Project project, SourceSet sourceSet, VelocityPluginExtension velocityPluginExtension) {
		String parentName = sourceSet.getName();
		String parentDisplayName;
		if (sourceSet instanceof DefaultSourceSet) {
			parentDisplayName = ((DefaultSourceSet)sourceSet).getDisplayName();
		} else {
			parentDisplayName = parentName;
		}

		VelocitySourceVirtualDirectory velocitySourceVirtualDirectory = new BasicVelocitySourceVirtualDirectory(parentName, parentDisplayName, this.objectFactory);
		new DslObject(sourceSet).getConvention().getPlugins().put(VelocitySourceVirtualDirectory.NAME, velocitySourceVirtualDirectory);
		SourceDirectorySet velocitySources = velocitySourceVirtualDirectory.getVelocity();
		velocitySources.srcDir("src/" + sourceSet.getName() + "/" + SOURCESET_INPUT_SUBDIRECTORY_NAME);
		sourceSet.getAllSource().source(velocitySources);

		String velocityTaskName = sourceSet.getTaskName("process","Velocity");
		Provider<Directory> outputDirectory = project.getLayout().getBuildDirectory().dir("generated-src/" + SOURCESET_OUTPUT_SUBDIRECTORY_NAME + "/" + sourceSet.getName());
		sourceSet.getJava().srcDir(outputDirectory);

		VelocityTask velocityTask = project.getTasks().create(velocityTaskName, VelocityTask.class, velocityTaskInner -> this.configureAutogeneratedTask(velocityTaskInner, outputDirectory, parentDisplayName));

		project.getTasks().named(sourceSet.getCompileJavaTaskName(), task -> this.registerCompileDependency(task, velocityTask));
	}

	private void configureTask(VelocityTask velocityTask, Configuration velocityConfiguration) {
		velocityTask.setVelocityClasspath(velocityConfiguration);
	}

	private void configureAutogeneratedTask(VelocityTask velocityTask, Provider<Directory> outputDirectory, String parentDisplayName) {
		velocityTask.setDescription("Process the velocity templates for sourceSet " + parentDisplayName);
		velocityTask.getOutputDirectory().convention(outputDirectory);
	}

	private void registerCompileDependency(Task compileTask, VelocityTask velocityTask) {
		compileTask.dependsOn(velocityTask);
	}
}
